generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model permisos {
  id             Int              @id @default(autoincrement())
  nombre         String?          @db.VarChar(255)
  permisos_roles permisos_roles[]
}

model permisos_roles {
  id        Int       @id @default(autoincrement())
  idRol     Int?
  idPermiso Int?
  permiso   permisos? @relation(fields: [idPermiso], references: [id])
  rol       roles?    @relation(fields: [idRol], references: [id])

  @@unique([idRol, idPermiso])
  @@index([idPermiso], map: "permisos_roles_idPermiso_fkey")
}

model roles {
  id             Int              @id @default(autoincrement())
  nombre         String?          @db.VarChar(45)
  permisos_roles permisos_roles[]
  usuarios_roles usuarios_roles[]
}

model user {
  username       String           @db.VarChar(16)
  razon_social   String           @db.VarChar(255)
  email          String?          @db.VarChar(255)
  password       String           @db.VarChar(255)
  create_time    DateTime?        @default(now()) @db.Timestamp(0)
  dni            String?          @db.VarChar(45)
  id             Int              @id @default(autoincrement())
  eventos        eventos[]
  noticias       noticias[]
  talleres       talleres[]
  usuarios_roles usuarios_roles[]
}

model usuarios_roles {
  id        Int    @id @default(autoincrement())
  idUsuario Int?
  idRol     Int?
  rol       roles? @relation(fields: [idRol], references: [id])
  usuario   user?  @relation(fields: [idUsuario], references: [id])

  @@unique([idUsuario, idRol])
  @@index([idRol], map: "usuarios_roles_idRol_fkey")
}

model eventos {
  idUser         Int?
  id             Int       @id @default(autoincrement())
  nombre         String?   @db.VarChar(255)
  descripcion    String?   @db.VarChar(255)
  image          String?   @db.VarChar(500)
  fecha_creacion DateTime? @db.Date
  fecha_edicion  DateTime? @db.Date
  precio         Float?
  slug           String?   @db.Text
  bg_color       String?   @default("000") @db.VarChar(10)
  user           user?     @relation(fields: [idUser], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "eventos_ibfk_1")

  @@index([idUser], map: "idUser")
}

model noticias {
  idUser         Int?
  id             Int       @id @default(autoincrement())
  titulo         String?   @db.VarChar(255)
  descripcion    String?   @db.VarChar(255)
  fecha_creacion DateTime? @db.Date
  fecha_edicion  DateTime? @db.Date
  user           user?     @relation(fields: [idUser], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "noticias_ibfk_1")

  @@index([idUser], map: "idUser")
}

model talleres {
  idUser            Int?
  id                Int       @id @default(autoincrement())
  nombre            String?   @db.VarChar(255)
  precio            Float?
  fecha_publicacion DateTime? @db.Date
  fecha_creacion    DateTime? @db.Date
  fecha_edicion     DateTime? @db.Date
  user              user?     @relation(fields: [idUser], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "talleres_ibfk_1")

  @@index([idUser], map: "idUser")
}

model fundadodres{
  id                Int       @id @default(autoincrement())
  imagen      String? @db.Text
  nombre      String @db.VarChar(255)
  fecha       String @db.VarChar(255)
  descripcion Json? 
}

model danzas {
  id          Int      @id @default(autoincrement())
  nombre      Json? 
  descripcion Json? 
  image       String? @db.Text
  slug        String? @db.Text
}

model categorias {
  id          Int      @id @default(autoincrement())
  nombre      String   @db.VarChar(255)
  comidas     comidas[] @relation("CategoriaComidas")
}

model tomos {
  id          Int               @id @default(autoincrement())
  titulo      Json? 
  image       String            @db.Text
  contenidos  tomos_contenido[] // Relación uno a muchos con tomos_contenido
}

model tomos_contenido {
  id          Int      @id @default(autoincrement())
  titulo      Json? 
  descripcion Json? 
  leyenda     Json? 
  image       String?  @db.Text
  tomoId      Int      // Clave foránea que apunta a tomos
  tomo        tomos    @relation(fields: [tomoId], references: [id]) // Relación muchos a uno con tomos
}


model comidas {
  id          Int      @id @default(autoincrement())
  idUser      Int
  nombre      String @db.VarChar(255)
  descripcion String? @db.Text
  precio      Float?  @default(0.00) 
  categoriaId Int
  categoria   categorias @relation("CategoriaComidas", fields: [categoriaId], references: [id])
}

